// Generated by gencpp from file gpar_lidar/Command.msg
// DO NOT EDIT!


#ifndef GPAR_LIDAR_MESSAGE_COMMAND_H
#define GPAR_LIDAR_MESSAGE_COMMAND_H

#include <ros/service_traits.h>


#include <gpar_lidar/CommandRequest.h>
#include <gpar_lidar/CommandResponse.h>


namespace gpar_lidar
{

struct Command
{

typedef CommandRequest Request;
typedef CommandResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Command
} // namespace gpar_lidar


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::gpar_lidar::Command > {
  static const char* value()
  {
    return "3a8ad692d089a2ce2722a25fc823ef5f";
  }

  static const char* value(const ::gpar_lidar::Command&) { return value(); }
};

template<>
struct DataType< ::gpar_lidar::Command > {
  static const char* value()
  {
    return "gpar_lidar/Command";
  }

  static const char* value(const ::gpar_lidar::Command&) { return value(); }
};


// service_traits::MD5Sum< ::gpar_lidar::CommandRequest> should match
// service_traits::MD5Sum< ::gpar_lidar::Command >
template<>
struct MD5Sum< ::gpar_lidar::CommandRequest>
{
  static const char* value()
  {
    return MD5Sum< ::gpar_lidar::Command >::value();
  }
  static const char* value(const ::gpar_lidar::CommandRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::gpar_lidar::CommandRequest> should match
// service_traits::DataType< ::gpar_lidar::Command >
template<>
struct DataType< ::gpar_lidar::CommandRequest>
{
  static const char* value()
  {
    return DataType< ::gpar_lidar::Command >::value();
  }
  static const char* value(const ::gpar_lidar::CommandRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::gpar_lidar::CommandResponse> should match
// service_traits::MD5Sum< ::gpar_lidar::Command >
template<>
struct MD5Sum< ::gpar_lidar::CommandResponse>
{
  static const char* value()
  {
    return MD5Sum< ::gpar_lidar::Command >::value();
  }
  static const char* value(const ::gpar_lidar::CommandResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::gpar_lidar::CommandResponse> should match
// service_traits::DataType< ::gpar_lidar::Command >
template<>
struct DataType< ::gpar_lidar::CommandResponse>
{
  static const char* value()
  {
    return DataType< ::gpar_lidar::Command >::value();
  }
  static const char* value(const ::gpar_lidar::CommandResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // GPAR_LIDAR_MESSAGE_COMMAND_H
